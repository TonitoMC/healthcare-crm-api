// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/tonitomc/healthcare-crm-api/internal/domain/role/models"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddPermission mocks base method.
func (m *MockService) AddPermission(roleID, permissionID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPermission", roleID, permissionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPermission indicates an expected call of AddPermission.
func (mr *MockServiceMockRecorder) AddPermission(roleID, permissionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPermission", reflect.TypeOf((*MockService)(nil).AddPermission), roleID, permissionID)
}

// CreateRole mocks base method.
func (m *MockService) CreateRole(role *models.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", role)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockServiceMockRecorder) CreateRole(role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockService)(nil).CreateRole), role)
}

// DeleteRole mocks base method.
func (m *MockService) DeleteRole(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockServiceMockRecorder) DeleteRole(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockService)(nil).DeleteRole), id)
}

// GetAllRoles mocks base method.
func (m *MockService) GetAllRoles() ([]models.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRoles")
	ret0, _ := ret[0].([]models.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRoles indicates an expected call of GetAllRoles.
func (mr *MockServiceMockRecorder) GetAllRoles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRoles", reflect.TypeOf((*MockService)(nil).GetAllRoles))
}

// GetPermissions mocks base method.
func (m *MockService) GetPermissions(roleID int) ([]models.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissions", roleID)
	ret0, _ := ret[0].([]models.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissions indicates an expected call of GetPermissions.
func (mr *MockServiceMockRecorder) GetPermissions(roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissions", reflect.TypeOf((*MockService)(nil).GetPermissions), roleID)
}

// GetRoleByID mocks base method.
func (m *MockService) GetRoleByID(id int) (*models.Role, []models.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleByID", id)
	ret0, _ := ret[0].(*models.Role)
	ret1, _ := ret[1].([]models.Permission)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRoleByID indicates an expected call of GetRoleByID.
func (mr *MockServiceMockRecorder) GetRoleByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByID", reflect.TypeOf((*MockService)(nil).GetRoleByID), id)
}

// RemovePermission mocks base method.
func (m *MockService) RemovePermission(roleID, permissionID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePermission", roleID, permissionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePermission indicates an expected call of RemovePermission.
func (mr *MockServiceMockRecorder) RemovePermission(roleID, permissionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePermission", reflect.TypeOf((*MockService)(nil).RemovePermission), roleID, permissionID)
}

// UpdateRole mocks base method.
func (m *MockService) UpdateRole(role *models.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", role)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockServiceMockRecorder) UpdateRole(role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockService)(nil).UpdateRole), role)
}

// UpdateRolePermissions mocks base method.
func (m *MockService) UpdateRolePermissions(roleID int, permissionIDs []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRolePermissions", roleID, permissionIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRolePermissions indicates an expected call of UpdateRolePermissions.
func (mr *MockServiceMockRecorder) UpdateRolePermissions(roleID, permissionIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRolePermissions", reflect.TypeOf((*MockService)(nil).UpdateRolePermissions), roleID, permissionIDs)
}
