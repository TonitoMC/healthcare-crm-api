// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/tonitomc/healthcare-crm-api/internal/domain/role/models"
	models0 "github.com/tonitomc/healthcare-crm-api/internal/domain/user/models"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddRole mocks base method.
func (m *MockRepository) AddRole(userID, roleID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRole", userID, roleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRole indicates an expected call of AddRole.
func (mr *MockRepositoryMockRecorder) AddRole(userID, roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRole", reflect.TypeOf((*MockRepository)(nil).AddRole), userID, roleID)
}

// ClearRoles mocks base method.
func (m *MockRepository) ClearRoles(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearRoles", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearRoles indicates an expected call of ClearRoles.
func (mr *MockRepositoryMockRecorder) ClearRoles(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearRoles", reflect.TypeOf((*MockRepository)(nil).ClearRoles), userID)
}

// Create mocks base method.
func (m *MockRepository) Create(u *models0.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), u)
}

// Delete mocks base method.
func (m *MockRepository) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockRepository) GetAll() ([]models0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepository)(nil).GetAll))
}

// GetByID mocks base method.
func (m *MockRepository) GetByID(id int) (*models0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepository)(nil).GetByID), id)
}

// GetByUsernameOrEmail mocks base method.
func (m *MockRepository) GetByUsernameOrEmail(identifier string) (*models0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsernameOrEmail", identifier)
	ret0, _ := ret[0].(*models0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsernameOrEmail indicates an expected call of GetByUsernameOrEmail.
func (mr *MockRepositoryMockRecorder) GetByUsernameOrEmail(identifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsernameOrEmail", reflect.TypeOf((*MockRepository)(nil).GetByUsernameOrEmail), identifier)
}

// GetUserRoles mocks base method.
func (m *MockRepository) GetUserRoles(userID int) ([]models.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoles", userID)
	ret0, _ := ret[0].([]models.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoles indicates an expected call of GetUserRoles.
func (mr *MockRepositoryMockRecorder) GetUserRoles(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoles", reflect.TypeOf((*MockRepository)(nil).GetUserRoles), userID)
}

// RemoveRole mocks base method.
func (m *MockRepository) RemoveRole(userID, roleID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRole", userID, roleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRole indicates an expected call of RemoveRole.
func (mr *MockRepositoryMockRecorder) RemoveRole(userID, roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRole", reflect.TypeOf((*MockRepository)(nil).RemoveRole), userID, roleID)
}

// Update mocks base method.
func (m *MockRepository) Update(u *models0.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), u)
}
