// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/tonitomc/healthcare-crm-api/internal/domain/role/models"
	models0 "github.com/tonitomc/healthcare-crm-api/internal/domain/user/models"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddRole mocks base method.
func (m *MockService) AddRole(userID, roleID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRole", userID, roleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRole indicates an expected call of AddRole.
func (mr *MockServiceMockRecorder) AddRole(userID, roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRole", reflect.TypeOf((*MockService)(nil).AddRole), userID, roleID)
}

// ClearRoles mocks base method.
func (m *MockService) ClearRoles(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearRoles", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearRoles indicates an expected call of ClearRoles.
func (mr *MockServiceMockRecorder) ClearRoles(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearRoles", reflect.TypeOf((*MockService)(nil).ClearRoles), userID)
}

// CreateUser mocks base method.
func (m *MockService) CreateUser(username, email, passwordHash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", username, email, passwordHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockServiceMockRecorder) CreateUser(username, email, passwordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockService)(nil).CreateUser), username, email, passwordHash)
}

// DeleteUser mocks base method.
func (m *MockService) DeleteUser(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockServiceMockRecorder) DeleteUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockService)(nil).DeleteUser), id)
}

// GetByID mocks base method.
func (m *MockService) GetByID(id int) (*models0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*models0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockServiceMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockService)(nil).GetByID), id)
}

// GetByUsernameOrEmail mocks base method.
func (m *MockService) GetByUsernameOrEmail(identifier string) (*models0.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUsernameOrEmail", identifier)
	ret0, _ := ret[0].(*models0.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUsernameOrEmail indicates an expected call of GetByUsernameOrEmail.
func (mr *MockServiceMockRecorder) GetByUsernameOrEmail(identifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUsernameOrEmail", reflect.TypeOf((*MockService)(nil).GetByUsernameOrEmail), identifier)
}

// GetRolesAndPermissions mocks base method.
func (m *MockService) GetRolesAndPermissions(userID int) ([]models.Role, []models.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolesAndPermissions", userID)
	ret0, _ := ret[0].([]models.Role)
	ret1, _ := ret[1].([]models.Permission)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRolesAndPermissions indicates an expected call of GetRolesAndPermissions.
func (mr *MockServiceMockRecorder) GetRolesAndPermissions(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolesAndPermissions", reflect.TypeOf((*MockService)(nil).GetRolesAndPermissions), userID)
}

// GetUserRoles mocks base method.
func (m *MockService) GetUserRoles(userID int) ([]models.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoles", userID)
	ret0, _ := ret[0].([]models.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoles indicates an expected call of GetUserRoles.
func (mr *MockServiceMockRecorder) GetUserRoles(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoles", reflect.TypeOf((*MockService)(nil).GetUserRoles), userID)
}

// RemoveRole mocks base method.
func (m *MockService) RemoveRole(userID, roleID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRole", userID, roleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRole indicates an expected call of RemoveRole.
func (mr *MockServiceMockRecorder) RemoveRole(userID, roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRole", reflect.TypeOf((*MockService)(nil).RemoveRole), userID, roleID)
}

// UpdateUser mocks base method.
func (m *MockService) UpdateUser(u *models0.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", u)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockServiceMockRecorder) UpdateUser(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockService)(nil).UpdateUser), u)
}
