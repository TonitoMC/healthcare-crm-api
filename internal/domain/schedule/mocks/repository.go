// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/tonitomc/healthcare-crm-api/internal/domain/schedule/models"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateSpecialHour mocks base method.
func (m *MockRepository) CreateSpecialHour(day models.SpecialDay) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSpecialHour", day)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSpecialHour indicates an expected call of CreateSpecialHour.
func (mr *MockRepositoryMockRecorder) CreateSpecialHour(day interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpecialHour", reflect.TypeOf((*MockRepository)(nil).CreateSpecialHour), day)
}

// CreateWorkingHour mocks base method.
func (m *MockRepository) CreateWorkingHour(day models.WorkDay) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkingHour", day)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWorkingHour indicates an expected call of CreateWorkingHour.
func (mr *MockRepositoryMockRecorder) CreateWorkingHour(day interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkingHour", reflect.TypeOf((*MockRepository)(nil).CreateWorkingHour), day)
}

// DeleteSpecialHour mocks base method.
func (m *MockRepository) DeleteSpecialHour(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSpecialHour", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSpecialHour indicates an expected call of DeleteSpecialHour.
func (mr *MockRepositoryMockRecorder) DeleteSpecialHour(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSpecialHour", reflect.TypeOf((*MockRepository)(nil).DeleteSpecialHour), id)
}

// DeleteWorkingHour mocks base method.
func (m *MockRepository) DeleteWorkingHour(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkingHour", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkingHour indicates an expected call of DeleteWorkingHour.
func (mr *MockRepositoryMockRecorder) DeleteWorkingHour(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkingHour", reflect.TypeOf((*MockRepository)(nil).DeleteWorkingHour), id)
}

// GetAllSpecialHours mocks base method.
func (m *MockRepository) GetAllSpecialHours() ([]models.SpecialDay, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSpecialHours")
	ret0, _ := ret[0].([]models.SpecialDay)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSpecialHours indicates an expected call of GetAllSpecialHours.
func (mr *MockRepositoryMockRecorder) GetAllSpecialHours() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSpecialHours", reflect.TypeOf((*MockRepository)(nil).GetAllSpecialHours))
}

// GetAllWorkingHours mocks base method.
func (m *MockRepository) GetAllWorkingHours() ([]models.WorkDay, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWorkingHours")
	ret0, _ := ret[0].([]models.WorkDay)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWorkingHours indicates an expected call of GetAllWorkingHours.
func (mr *MockRepositoryMockRecorder) GetAllWorkingHours() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWorkingHours", reflect.TypeOf((*MockRepository)(nil).GetAllWorkingHours))
}

// GetSpecialHoursBetween mocks base method.
func (m *MockRepository) GetSpecialHoursBetween(start, end time.Time) ([]models.SpecialDay, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecialHoursBetween", start, end)
	ret0, _ := ret[0].([]models.SpecialDay)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecialHoursBetween indicates an expected call of GetSpecialHoursBetween.
func (mr *MockRepositoryMockRecorder) GetSpecialHoursBetween(start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecialHoursBetween", reflect.TypeOf((*MockRepository)(nil).GetSpecialHoursBetween), start, end)
}

// GetSpecialHoursByDate mocks base method.
func (m *MockRepository) GetSpecialHoursByDate(date time.Time) ([]models.SpecialDay, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecialHoursByDate", date)
	ret0, _ := ret[0].([]models.SpecialDay)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecialHoursByDate indicates an expected call of GetSpecialHoursByDate.
func (mr *MockRepositoryMockRecorder) GetSpecialHoursByDate(date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecialHoursByDate", reflect.TypeOf((*MockRepository)(nil).GetSpecialHoursByDate), date)
}

// UpdateSpecialHour mocks base method.
func (m *MockRepository) UpdateSpecialHour(day models.SpecialDay) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSpecialHour", day)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSpecialHour indicates an expected call of UpdateSpecialHour.
func (mr *MockRepositoryMockRecorder) UpdateSpecialHour(day interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpecialHour", reflect.TypeOf((*MockRepository)(nil).UpdateSpecialHour), day)
}

// UpdateWorkingHour mocks base method.
func (m *MockRepository) UpdateWorkingHour(day models.WorkDay) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkingHour", day)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkingHour indicates an expected call of UpdateWorkingHour.
func (mr *MockRepositoryMockRecorder) UpdateWorkingHour(day interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkingHour", reflect.TypeOf((*MockRepository)(nil).UpdateWorkingHour), day)
}
