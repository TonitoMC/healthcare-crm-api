// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/tonitomc/healthcare-crm-api/internal/domain/schedule/models"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddSpecialDay mocks base method.
func (m *MockService) AddSpecialDay(day models.SpecialDay) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSpecialDay", day)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSpecialDay indicates an expected call of AddSpecialDay.
func (mr *MockServiceMockRecorder) AddSpecialDay(day interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpecialDay", reflect.TypeOf((*MockService)(nil).AddSpecialDay), day)
}

// DeleteSpecialDay mocks base method.
func (m *MockService) DeleteSpecialDay(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSpecialDay", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSpecialDay indicates an expected call of DeleteSpecialDay.
func (mr *MockServiceMockRecorder) DeleteSpecialDay(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSpecialDay", reflect.TypeOf((*MockService)(nil).DeleteSpecialDay), id)
}

// GetEffectiveDay mocks base method.
func (m *MockService) GetEffectiveDay(date time.Time) (*models.EffectiveDay, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEffectiveDay", date)
	ret0, _ := ret[0].(*models.EffectiveDay)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEffectiveDay indicates an expected call of GetEffectiveDay.
func (mr *MockServiceMockRecorder) GetEffectiveDay(date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEffectiveDay", reflect.TypeOf((*MockService)(nil).GetEffectiveDay), date)
}

// GetEffectiveRange mocks base method.
func (m *MockService) GetEffectiveRange(start, end time.Time) ([]models.EffectiveDay, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEffectiveRange", start, end)
	ret0, _ := ret[0].([]models.EffectiveDay)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEffectiveRange indicates an expected call of GetEffectiveRange.
func (mr *MockServiceMockRecorder) GetEffectiveRange(start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEffectiveRange", reflect.TypeOf((*MockService)(nil).GetEffectiveRange), start, end)
}

// GetSpecialHoursBetween mocks base method.
func (m *MockService) GetSpecialHoursBetween(start, end time.Time) ([]models.SpecialDay, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecialHoursBetween", start, end)
	ret0, _ := ret[0].([]models.SpecialDay)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecialHoursBetween indicates an expected call of GetSpecialHoursBetween.
func (mr *MockServiceMockRecorder) GetSpecialHoursBetween(start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecialHoursBetween", reflect.TypeOf((*MockService)(nil).GetSpecialHoursBetween), start, end)
}

// GetWorkingHours mocks base method.
func (m *MockService) GetWorkingHours() ([]models.WorkDay, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkingHours")
	ret0, _ := ret[0].([]models.WorkDay)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkingHours indicates an expected call of GetWorkingHours.
func (mr *MockServiceMockRecorder) GetWorkingHours() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkingHours", reflect.TypeOf((*MockService)(nil).GetWorkingHours))
}

// IsDateOpen mocks base method.
func (m *MockService) IsDateOpen(date time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDateOpen", date)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDateOpen indicates an expected call of IsDateOpen.
func (mr *MockServiceMockRecorder) IsDateOpen(date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDateOpen", reflect.TypeOf((*MockService)(nil).IsDateOpen), date)
}

// IsTimeRangeWithinWorkingHours mocks base method.
func (m *MockService) IsTimeRangeWithinWorkingHours(date, start, end time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTimeRangeWithinWorkingHours", date, start, end)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTimeRangeWithinWorkingHours indicates an expected call of IsTimeRangeWithinWorkingHours.
func (mr *MockServiceMockRecorder) IsTimeRangeWithinWorkingHours(date, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTimeRangeWithinWorkingHours", reflect.TypeOf((*MockService)(nil).IsTimeRangeWithinWorkingHours), date, start, end)
}

// UpdateSpecialDay mocks base method.
func (m *MockService) UpdateSpecialDay(day models.SpecialDay) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSpecialDay", day)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSpecialDay indicates an expected call of UpdateSpecialDay.
func (mr *MockServiceMockRecorder) UpdateSpecialDay(day interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpecialDay", reflect.TypeOf((*MockService)(nil).UpdateSpecialDay), day)
}

// UpdateWorkDay mocks base method.
func (m *MockService) UpdateWorkDay(day models.WorkDay) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkDay", day)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkDay indicates an expected call of UpdateWorkDay.
func (mr *MockServiceMockRecorder) UpdateWorkDay(day interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkDay", reflect.TypeOf((*MockService)(nil).UpdateWorkDay), day)
}
